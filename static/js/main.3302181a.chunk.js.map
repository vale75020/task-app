{"version":3,"sources":["initial-data.js","components/Task.js","components/Column.js","App.js","index.js"],"names":["initialData","tasks","task-1","id","content","task-2","task-3","task-4","task-5","columns","column-1","title","taskIds","column-2","column-3","columnOrder","Container","styled","div","_templateObject","props","isDragDisabled","isDragging","Task","_this","this","task","react_default","a","createElement","react_beautiful_dnd_esm","draggableId","index","provided","snapshot","Object","assign","draggableProps","dragHandleProps","ref","innerRef","Component","Column_templateObject","Title","h3","_templateObject2","TaskList","_templateObject3","isDraggingOver","Column","Column_Container","column","droppableId","droppableProps","map","Task_Task","key","placeholder","App_templateObject","App","state","onDragStart","document","body","style","color","transition","onDragUpdate","update","destination","opacity","keys","length","backgroundColor","concat","onDragEnd","result","_objectSpread3","source","start","finish","startTaskIds","Array","from","splice","newStart","objectSpread","finishTaskIds","newFinish","newState","defineProperty","setState","newTaskIds","newColumn","_this2","App_Container","columnId","taskId","Column_Column","React","ReactDOM","render","src_App_0","getElementById"],"mappings":"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","file":"static/js/main.3302181a.chunk.js","sourcesContent":["const initialData = {\n    tasks: {\n        \"task-1\": { id:\"task-1\", content:\"Take out the garbage\"},\n        \"task-2\": { id:\"task-2\", content:\"Buy milk\"},\n        \"task-3\": { id:\"task-3\", content:\"Football match\"},\n        \"task-4\": { id:\"task-4\", content:\"Cook dinner\"},\n        \"task-5\": { id:\"task-5\", content:\"Charge my pc\"}\n    },\n    columns: {\n        \"column-1\": {\n            id: \"column-1\",\n            title: \"To do\",\n            taskIds: [\"task-1\",\"task-2\",\"task-3\",\"task-4\",\"task-5\"]\n        },\n        \"column-2\": {\n            id: \"column-2\",\n            title: \"Doing\",\n            taskIds: []\n        },\n        \"column-3\": {\n            id: \"column-3\",\n            title: \"Done\",\n            taskIds: []\n        }\n    },\n\n    // Facilitate rendering of the columns\n    columnOrder: [\"column-1\", \"column-2\", \"column-3\"]\n};\n\nexport default initialData","import React, { Component } from \"react\";\nimport styled from \"styled-components\";\nimport { Draggable } from \"react-beautiful-dnd\";\n\nconst Container = styled.div`\n  display: flex;\n  margin-bottom: 8px;\n  padding: 8px;\n  border: 1px solid lightgrey;\n  border-radius: 2px;\n  background-color: ${props => \n  props.isDragDisabled\n    ? 'lightgrey'\n    : props.isDragging \n        ? \"lightgreen\" \n        : 'white'}; \n`;\n\n// const Handle = styled.div`\n//     width:20px;\n//     height: 20px;\n//     background-color: orange;\n//     border-radius:4px;\n//     margin-right: 8px;\n//     `;\n\nexport default class Task extends Component {\n  render() {\n\n    const isDragDisabled = this.props.task.id === \"task-1\";\n    return (\n      <Draggable \n      draggableId={this.props.task.id} \n      index={this.props.index}\n      isDragDisabled={isDragDisabled}>\n          {(provided, snapshot) => (\n        <Container\n        {...provided.draggableProps}\n        {...provided.dragHandleProps}\n        ref={provided.innerRef}\n        isDragging={snapshot.isDragging} // to style my component when it drag\n        isDragDisabled={isDragDisabled}\n        >\n            {/* <Handle {...provided.dragHandleProps} /> */}\n        {this.props.task.content}\n        </Container>\n        )}\n      </Draggable>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport styled from \"styled-components\";\nimport Task from \"./Task\";\nimport { Droppable } from \"react-beautiful-dnd\";\n\nconst Container = styled.div`\n  margin: 8px;\n  border: 1px solid lightgrey;\n  border-radius: 2px;\n  width: 30%;\n  min-width:300px;\n\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Title = styled.h3`\n  padding: 8px;\n`;\nconst TaskList = styled.div`\n  padding: 8px;\n  transition: background-color 0.2s ease;\n  background-color: ${props => (props.isDraggingOver ? \"skyblue\" : \"white\")};\n  flex-grow: 1;\n  min-height: 100px;\n`;\n\nexport default class Column extends Component {\n  render() {\n    return (\n      <Container>\n        <Title>{this.props.column.title}</Title>\n        <Droppable \n        droppableId={this.props.column.id}\n        // type={this.props.column.id === 'column-3' ? 'done' : 'active'}\n        // isDropDisabled={this.props.isDropDisabled}\n        >\n            {(provided, snapshot) => (\n          <TaskList\n          ref={provided.innerRef}\n          {...provided.droppableProps}\n          isDraggingOver={snapshot.isDraggingOver}\n          >\n            {this.props.tasks.map((task, index) => <Task key={task.id} task={task} index={index} />)}\n            {provided.placeholder}\n          </TaskList>\n            )}\n        </Droppable>\n      </Container>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport \"@atlaskit/css-reset\";\nimport initialData from \"./initial-data\";\nimport Column from \"./components/Column\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  width: 90%;\n  margin: 0 auto;\n`;\n\nclass App extends React.Component {\n  state = initialData;\n\n  // onDragStart = start => {\n  //   const homeIndex = this.state.columnOrder.indexOf(start.source.droppableId);\n  //   this.setState({\n  //     homeIndex\n  //   })\n  // }\n\n  onDragStart = () => {\n    document.body.style.color = \"orange\"; // text color change when drag start\n    document.body.style.transition = \"background-color 0.2s ease;\";\n  };\n\n  onDragUpdate = update => {\n    const { destination } = update;\n    const opacity = destination\n      ? destination.index / Object.keys(this.state.tasks).length\n      : 0;\n    document.body.style.backgroundColor = `rgba(153, 141, 217, ${opacity})`;\n  };\n\n  onDragEnd = result => {\n    // update state\n    document.body.style.color = \"inherit\"; // final text color after drag\n    document.body.style.backgroundColor = \"inherit\";\n\n    //TO DO render our column\n    const { destination, source, draggableId } = result;\n\n    if (!destination) {\n      return;\n    }\n\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      return;\n    }\n\n    const start = this.state.columns[source.droppableId];\n    const finish = this.state.columns[destination.droppableId];\n\n    if (start === finish) {\n      const newTaskIds = Array.from(start.taskIds);\n      newTaskIds.splice(source.index, 1);\n      newTaskIds.splice(destination.index, 0, draggableId);\n\n      const newColumn = {\n        ...start,\n        taskIds: newTaskIds\n      };\n\n      const newState = {\n        ...this.state,\n        columns: {\n          ...this.state.columns,\n          [newColumn.id]: newColumn\n        }\n      };\n      this.setState(newState);\n      return;\n    }\n\n    // Moving from one list to another\n    const startTaskIds = Array.from(start.taskIds);\n    startTaskIds.splice(source.index, 1);\n    const newStart = {\n      ...start,\n      taskIds: startTaskIds\n    };\n\n    const finishTaskIds = Array.from(finish.taskIds);\n    finishTaskIds.splice(destination.index, 0, draggableId);\n    const newFinish = {\n      ...finish,\n      taskIds: finishTaskIds\n    };\n\n    const newState = {\n      ...this.state,\n      columns: {\n        ...this.state.columns,\n        [newStart.id]: newStart,\n        [newFinish.id]: newFinish\n      }\n    };\n    this.setState(newState);\n  };\n\n  render() {\n    return (\n      <DragDropContext\n        onDragEnd={this.onDragEnd}\n        onDragStart={this.onDragStart}\n        onDragUpdate={this.onDragUpdate}\n      >\n        <Container>\n          {this.state.columnOrder.map(columnId => {\n            const column = this.state.columns[columnId];\n            const tasks = column.taskIds.map(\n              taskId => this.state.tasks[taskId]\n            );\n\n            return <Column key={column.id} column={column} tasks={tasks} />;\n          })}\n        </Container>\n      </DragDropContext>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"@atlaskit/css-reset\"\n\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}